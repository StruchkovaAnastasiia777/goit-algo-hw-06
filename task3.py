import networkx as nx
import matplotlib.pyplot as plt
import heapq
import numpy as np
from collections import defaultdict

print("üõ£Ô∏è –ó–ê–í–î–ê–ù–ù–Ø 3: –ê–õ–ì–û–†–ò–¢–ú –î–ï–ô–ö–°–¢–†–ò")
print("=" * 50)

def create_weighted_city_graph():
    """–°—Ç–≤–æ—Ä—é—î –∑–≤–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ—ó –º–µ—Ä–µ–∂—ñ –∑ —á–∞—Å–æ–º –ø—Ä–æ—ó–∑–¥—É"""
    G = nx.Graph()
    
    # –î–æ–¥–∞—î–º–æ —Ä–∞–π–æ–Ω–∏
    districts = [
        "–¶–µ–Ω—Ç—Ä", "–í–æ–∫–∑–∞–ª", "–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–õ—ñ–∫–∞—Ä–Ω—è", "–†–∏–Ω–æ–∫", 
        "–ü–∞—Ä–∫", "–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–ü—Ä–æ–º–∑–æ–Ω–∞", "–ê–µ—Ä–æ–ø–æ—Ä—Ç", 
        "–°—Ç–∞–¥—ñ–æ–Ω", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä", "–®–∫–æ–ª–∞"
    ]
    
    G.add_nodes_from(districts)
    
    # –î–æ–¥–∞—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ –∑ –≤–∞–≥–∞–º–∏ (—á–∞—Å –ø—Ä–æ—ó–∑–¥—É –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö)
    weighted_routes = [
        # –û—Å–Ω–æ–≤–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä (—à–≤–∏–¥–∫—ñ)
        ("–¶–µ–Ω—Ç—Ä", "–í–æ–∫–∑–∞–ª", 8),
        ("–¶–µ–Ω—Ç—Ä", "–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", 12), 
        ("–¶–µ–Ω—Ç—Ä", "–†–∏–Ω–æ–∫", 6),
        ("–¶–µ–Ω—Ç—Ä", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä", 10),
        ("–¶–µ–Ω—Ç—Ä", "–õ—ñ–∫–∞—Ä–Ω—è", 15),
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏ –≤—ñ–¥ –≤–æ–∫–∑–∞–ª—É
        ("–í–æ–∫–∑–∞–ª", "–ê–µ—Ä–æ–ø–æ—Ä—Ç", 25),  # –î–æ–≤–≥–∏–π –º–∞—Ä—à—Ä—É—Ç
        ("–í–æ–∫–∑–∞–ª", "–ü—Ä–æ–º–∑–æ–Ω–∞", 18),
        ("–í–æ–∫–∑–∞–ª", "–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", 20),
        
        # –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å—å–∫—ñ –º–∞—Ä—à—Ä—É—Ç–∏
        ("–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–®–∫–æ–ª–∞", 14),
        ("–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–õ—ñ–∫–∞—Ä–Ω—è", 10),
        ("–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–ü–∞—Ä–∫", 8),
        
        # –¢–æ—Ä–≥–æ–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏
        ("–†–∏–Ω–æ–∫", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä", 5),  # –ö–æ—Ä–æ—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç
        ("–†–∏–Ω–æ–∫", "–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", 22),
        
        # –ñ–∏—Ç–ª–æ–≤—ñ —Ä–∞–π–æ–Ω–∏
        ("–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–®–∫–æ–ª–∞", 12),
        ("–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–õ—ñ–∫–∞—Ä–Ω—è", 16),
        ("–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–°—Ç–∞–¥—ñ–æ–Ω", 9),
        
        # –†–æ–∑–≤–∞–∂–∞–ª—å–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏
        ("–ü–∞—Ä–∫", "–°—Ç–∞–¥—ñ–æ–Ω", 7),
        ("–ü–∞—Ä–∫", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä", 13),
        
        # –ü—Ä–æ–º–∏—Å–ª–æ–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏  
        ("–ü—Ä–æ–º–∑–æ–Ω–∞", "–ê–µ—Ä–æ–ø–æ—Ä—Ç", 15),
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
        ("–õ—ñ–∫–∞—Ä–Ω—è", "–°—Ç–∞–¥—ñ–æ–Ω", 11),
        ("–®–∫–æ–ª–∞", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä", 17),
        ("–°—Ç–∞–¥—ñ–æ–Ω", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä", 8)
    ]
    
    # –î–æ–¥–∞—î–º–æ –∑–≤–∞–∂–µ–Ω—ñ —Ä–µ–±—Ä–∞
    for source, target, weight in weighted_routes:
        G.add_edge(source, target, weight=weight)
    
    return G, weighted_routes

def dijkstra_manual(graph, start):
    """
    –†—É—á–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –î–µ–π–∫—Å—Ç—Ä–∏
    
    Args:
        graph: NetworkX –≥—Ä–∞—Ñ –∑ –≤–∞–≥–∞–º–∏
        start: –ø–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
    
    Returns:
        distances: —Å–ª–æ–≤–Ω–∏–∫ –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –¥–æ –≤—Å—ñ—Ö –≤–µ—Ä—à–∏–Ω
        previous: —Å–ª–æ–≤–Ω–∏–∫ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤–µ—Ä—à–∏–Ω –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—É
    """
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    distances = {node: float('infinity') for node in graph.nodes()}
    distances[start] = 0
    previous = {node: None for node in graph.nodes()}
    unvisited = set(graph.nodes())
    
    print(f"\\nüîÑ –ê–õ–ì–û–†–ò–¢–ú –î–ï–ô–ö–°–¢–†–ò: –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º –≤—ñ–¥ {start}")
    print("-" * 60)
    step = 0
    
    while unvisited:
        step += 1
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤–µ—Ä—à–∏–Ω—É –∑ –Ω–∞–π–º–µ–Ω—à–æ—é –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é
        current = min(unvisited, key=lambda node: distances[node])
        
        # –Ø–∫—â–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞, –ø—Ä–∏–ø–∏–Ω—è—î–º–æ
        if distances[current] == float('infinity'):
            break
        
        print(f"\\n–ö—Ä–æ–∫ {step}: –û–±—Ä–æ–±–ª—è—î–º–æ {current} (–≤—ñ–¥—Å—Ç–∞–Ω—å: {distances[current]} —Ö–≤)")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–æ —Å—É—Å—ñ–¥—ñ–≤
        for neighbor in graph.neighbors(current):
            if neighbor in unvisited:
                weight = graph[current][neighbor]['weight']
                new_distance = distances[current] + weight
                
                if new_distance < distances[neighbor]:
                    old_distance = distances[neighbor] if distances[neighbor] != float('infinity') else "‚àû"
                    distances[neighbor] = new_distance
                    previous[neighbor] = current
                    print(f"  –û–Ω–æ–≤–ª–µ–Ω–æ {neighbor}: {old_distance} ‚Üí {new_distance} —Ö–≤ (—á–µ—Ä–µ–∑ {current})")
                else:
                    print(f"  {neighbor}: {new_distance} ‚â• {distances[neighbor]} —Ö–≤ (–Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ)")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–µ—Ä—à–∏–Ω—É –∑ –Ω–µ–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö
        unvisited.remove(current)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä—à–∏—Ö –∫—Ä–æ–∫—ñ–≤)
        if step <= 3:
            print("  –ü–æ—Ç–æ—á–Ω—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ:", end="")
            for node in sorted(graph.nodes()):
                dist = distances[node] if distances[node] != float('infinity') else "‚àû"
                visited_mark = "‚úì" if node not in unvisited else ""
                print(f" {node}:{dist}{visited_mark}", end="")
            print()
    
    return distances, previous

def reconstruct_path(previous, start, end):
    """–í—ñ–¥–Ω–æ–≤–ª—é—î —à–ª—è—Ö –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –¥–æ –∫—ñ–Ω—Ü—è"""
    path = []
    current = end
    
    while current is not None:
        path.append(current)
        current = previous[current]
    
    path.reverse()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —à–ª—è—Ö
    if path[0] == start:
        return path
    else:
        return None

def compare_with_networkx(graph, start):
    """–ü–æ—Ä—ñ–≤–Ω—é—î –≤–ª–∞—Å–Ω—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑ NetworkX"""
    print(f"\\nüîç –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ó NETWORKX:")
    print("-" * 40)
    
    # –í–ª–∞—Å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
    manual_distances, manual_previous = dijkstra_manual(graph, start)
    
    # NetworkX —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
    nx_distances = nx.single_source_dijkstra_path_length(graph, start, weight='weight')
    nx_paths = nx.single_source_dijkstra_path(graph, start, weight='weight')
    
    print(f"\\n–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω–µ–π:")
    print(f"{'–í–µ—Ä—à–∏–Ω–∞':<20} {'–í–ª–∞—Å–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º':<15} {'NetworkX':<15} {'–°—Ç–∞—Ç—É—Å':<10}")
    print("-" * 60)
    
    all_correct = True
    for node in sorted(graph.nodes()):
        manual_dist = manual_distances[node] if manual_distances[node] != float('infinity') else "‚àû"
        nx_dist = nx_distances.get(node, "‚àû")
        
        if manual_distances[node] == nx_distances.get(node, float('infinity')):
            status = "‚úÖ"
        else:
            status = "‚ùå"
            all_correct = False
        
        print(f"{node:<20} {str(manual_dist):<15} {str(nx_dist):<15} {status:<10}")
    
    if all_correct:
        print(f"\\nüéâ –í–ª–∞—Å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        print(f"\\n‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω—ñ —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ –≤ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó")
    
    return manual_distances, manual_previous, nx_distances, nx_paths

def analyze_shortest_paths(graph, distances, previous, nx_paths, start_node):
    """–ê–Ω–∞–ª—ñ–∑—É—î –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏"""
    print(f"\\nüìä –ê–ù–ê–õ–Ü–ó –ù–ê–ô–ö–û–†–û–¢–®–ò–• –®–õ–Ø–•–Ü–í –í–Ü–î {start_node}:")
    print("=" * 60)
    
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é
    sorted_distances = sorted(distances.items(), key=lambda x: x[1])
    
    print(f"{'–ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è':<20} {'–ß–∞—Å (—Ö–≤)':<10} {'–ù–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö':<30}")
    print("-" * 70)
    
    for destination, distance in sorted_distances:
        if destination != start_node and distance != float('infinity'):
            # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —à–ª—è—Ö
            path = reconstruct_path(previous, start_node, destination)
            if path:
                path_str = " ‚Üí ".join(path)
                print(f"{destination:<20} {distance:<10} {path_str:<30}")
    
    # –ù–∞–π–±–ª–∏–∂—á—ñ —Ç–∞ –Ω–∞–π–¥–∞–ª—å—à—ñ –ø—É–Ω–∫—Ç–∏
    accessible_destinations = [(dest, dist) for dest, dist in distances.items() 
                              if dest != start_node and dist != float('infinity')]
    
    if accessible_destinations:
        closest = min(accessible_destinations, key=lambda x: x[1])
        farthest = max(accessible_destinations, key=lambda x: x[1])
        
        print(f"\\nüéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–ù–∞–π–±–ª–∏–∂—á–∏–π –ø—É–Ω–∫—Ç: {closest[0]} ({closest[1]} —Ö–≤)")
        print(f"–ù–∞–π–¥–∞–ª—å—à–∏–π –ø—É–Ω–∫—Ç: {farthest[0]} ({farthest[1]} —Ö–≤)")
        print(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –ø–æ—ó–∑–¥–∫–∏: {np.mean([dist for _, dist in accessible_destinations]):.1f} —Ö–≤")

def create_shortest_path_tree(graph, start, previous):
    """–°—Ç–≤–æ—Ä—é—î –¥–µ—Ä–µ–≤–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤"""
    tree_edges = []
    for node, prev_node in previous.items():
        if prev_node is not None:
            tree_edges.append((prev_node, node))
    
    tree = nx.Graph()
    tree.add_edges_from(tree_edges)
    
    # –î–æ–¥–∞—î–º–æ –≤–∞–≥–∏ –¥–æ –¥–µ—Ä–µ–≤–∞
    for edge in tree_edges:
        weight = graph[edge[0]][edge[1]]['weight']
        tree[edge[0]][edge[1]]['weight'] = weight
    
    return tree

def visualize_dijkstra_results(graph, start, distances, previous, nx_paths):
    """–í—ñ–∑—É–∞–ª—ñ–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—É –î–µ–π–∫—Å—Ç—Ä–∏"""
    print(f"\\nüé® –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í:")
    
    fig, axes = plt.subplots(2, 2, figsize=(18, 14))
    fig.suptitle(f'–ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏: –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –≤—ñ–¥ {start}', fontsize=16, fontweight='bold')
    
    pos = nx.spring_layout(graph, seed=42, k=3, iterations=50)
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –í–∏—Ö—ñ–¥–Ω–∏–π –∑–≤–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ
    nx.draw(graph, pos, ax=axes[0,0], with_labels=True, node_color='lightblue',
            node_size=1000, font_size=9, font_weight='bold', edge_color='gray')
    
    # –î–æ–¥–∞—î–º–æ –≤–∞–≥–∏ —Ä–µ–±–µ—Ä
    edge_labels = nx.get_edge_attributes(graph, 'weight')
    nx.draw_networkx_edge_labels(graph, pos, edge_labels, ax=axes[0,0], font_size=8)
    
    # –í–∏–¥—ñ–ª—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –≤–µ—Ä—à–∏–Ω—É
    nx.draw_networkx_nodes(graph, pos, nodelist=[start], node_color='green', 
                          node_size=1200, ax=axes[0,0])
    
    axes[0,0].set_title('–í–∏—Ö—ñ–¥–Ω–∏–π –≥—Ä–∞—Ñ –∑ –≤–∞–≥–∞–º–∏\\n(—á–∏—Å–ª–∞ = —á–∞—Å —É —Ö–≤–∏–ª–∏–Ω–∞—Ö)', fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –î–µ—Ä–µ–≤–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤
    tree = create_shortest_path_tree(graph, start, previous)
    
    nx.draw(graph, pos, ax=axes[0,1], with_labels=True, node_color='lightgray',
            node_size=800, font_size=9, font_weight='bold', edge_color='lightgray', alpha=0.3)
    
    nx.draw_networkx_nodes(tree, pos, node_color='orange', node_size=1000, ax=axes[0,1])
    nx.draw_networkx_edges(tree, pos, edge_color='red', width=3, ax=axes[0,1])
    nx.draw_networkx_nodes(graph, pos, nodelist=[start], node_color='green', 
                          node_size=1200, ax=axes[0,1])
    
    axes[0,1].set_title('–î–µ—Ä–µ–≤–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤\\n(—á–µ—Ä–≤–æ–Ω—ñ —Ä–µ–±—Ä–∞ = –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏)', fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –í—ñ–¥—Å—Ç–∞–Ω—ñ —è–∫ —Ä–æ–∑–º—ñ—Ä–∏ –≤—É–∑–ª—ñ–≤
    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–ª—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ –≤—É–∑–ª—ñ–≤
    max_distance = max([d for d in distances.values() if d != float('infinity')])
    node_sizes = []
    node_colors = []
    
    for node in graph.nodes():
        if distances[node] == float('infinity'):
            size = 300
            color = 'gray'
        else:
            # –Ü–Ω–≤–µ—Ä—Ç—É—î–º–æ: —á–∏–º –±–ª–∏–∂—á–µ, —Ç–∏–º –±—ñ–ª—å—à–µ
            normalized_dist = 1 - (distances[node] / max_distance)
            size = 300 + normalized_dist * 1200
            color = plt.cm.get_cmap('RdYlGn')(normalized_dist)
        
        node_sizes.append(size)
        node_colors.append(color)
    
    nx.draw(graph, pos, ax=axes[1,0], with_labels=True, node_color=node_colors,
            node_size=node_sizes, font_size=9, font_weight='bold', edge_color='lightgray')
    
    axes[1,0].set_title('–í—ñ–¥—Å—Ç–∞–Ω—ñ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Ç–æ—á–∫–∏\\n(–±—ñ–ª—å—à–∏–π —Ç–∞ –∑–µ–ª–µ–Ω—ñ—à–∏–π = –±–ª–∏–∂—á–µ)', fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏
    nx.draw(graph, pos, ax=axes[1,1], with_labels=True, node_color='lightgray',
            node_size=800, font_size=9, font_weight='bold', edge_color='lightgray', alpha=0.5)
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –∫—ñ–ª—å–∫–∞ —Ü—ñ–∫–∞–≤–∏—Ö —à–ª—è—Ö—ñ–≤ –¥–ª—è –ø–æ–∫–∞–∑—É
    interesting_destinations = ['–ê–µ—Ä–æ–ø–æ—Ä—Ç', '–®–∫–æ–ª–∞', '–ü—Ä–æ–º–∑–æ–Ω–∞']
    colors = ['red', 'blue', 'purple']
    
    for i, dest in enumerate(interesting_destinations):
        if dest in graph.nodes() and dest in nx_paths:
            path = nx_paths[dest]
            path_edges = [(path[j], path[j+1]) for j in range(len(path)-1)]
            
            nx.draw_networkx_edges(graph, pos, edgelist=path_edges, 
                                 edge_color=colors[i], width=3, alpha=0.7, ax=axes[1,1])
            nx.draw_networkx_nodes(graph, pos, nodelist=path, 
                                 node_color=colors[i], node_size=1000, alpha=0.7, ax=axes[1,1])
    
    # –í–∏–¥—ñ–ª—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –≤–µ—Ä—à–∏–Ω—É
    nx.draw_networkx_nodes(graph, pos, nodelist=[start], node_color='green', 
                          node_size=1200, ax=axes[1,1])
    
    axes[1,1].set_title(f'–ü—Ä–∏–∫–ª–∞–¥–∏ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤\\n(—Ä—ñ–∑–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ = —Ä—ñ–∑–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏)', fontweight='bold')
    
    plt.tight_layout()
    plt.show()

def practical_applications():
    """–†–æ–∑–ø–æ–≤—ñ–¥–∞—î –ø—Ä–æ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è"""
    print(f"\\nüåç –ü–†–ê–ö–¢–ò–ß–ù–Ü –ó–ê–°–¢–û–°–£–í–ê–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–£ –î–ï–ô–ö–°–¢–†–ò:")
    print("=" * 50)
    
    applications = [
        ("üöó GPS –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è", "–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ–±–æ–∫"),
        ("üåê –ú–µ—Ä–µ–∂–µ–≤–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è", "–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —à–ª—è—Ö –ø–∞–∫–µ—Ç—ñ–≤ –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ"),
        ("‚úàÔ∏è –ê–≤—ñ–∞–ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è", "–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞–π–¥–µ—à–µ–≤—à–∏—Ö –∞–≤—ñ–∞–º–∞—Ä—à—Ä—É—Ç—ñ–≤"),
        ("üöá –ì—Ä–æ–º–∞–¥—Å—å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –º—ñ—Å—å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"),
        ("üì± –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ", "–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö –∑–≤'—è–∑–∫—ñ–≤ –º—ñ–∂ –ª—é–¥—å–º–∏"),
        ("üéÆ –Ü–≥—Ä–∏", "–ü–æ—à—É–∫ —à–ª—è—Ö—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ (AI –ø–∞—Ç—Ñ–∞–π–Ω–¥–∏–Ω–≥)"),
        ("üí∞ –§—ñ–Ω–∞–Ω—Å–∏", "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π —Ç–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É"),
        ("üè• –ú–µ–¥–∏—Ü–∏–Ω–∞", "–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞–π—à–≤–∏–¥—à–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É —à–≤–∏–¥–∫–æ—ó –¥–æ–ø–æ–º–æ–≥–∏")
    ]
    
    for app, description in applications:
        print(f"{app}: {description}")

# –û—Å–Ω–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ
    G, weighted_routes = create_weighted_city_graph()
    
    print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∑–≤–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ –∑ {G.number_of_nodes()} —Ä–∞–π–æ–Ω—ñ–≤ —Ç–∞ {G.number_of_edges()} –º–∞—Ä—à—Ä—É—Ç—ñ–≤")
    print(f"–í–∞–≥–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å —á–∞—Å –ø—Ä–æ—ó–∑–¥—É –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö")
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Ç–æ—á–∫—É
    start_point = "–¶–µ–Ω—Ç—Ä"
    
    # –†–µ–∞–ª—ñ–∑—É—î–º–æ –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏ —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ NetworkX
    distances, previous, nx_distances, nx_paths = compare_with_networkx(G, start_point)
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    analyze_shortest_paths(G, distances, previous, nx_paths, start_point)
    
    # –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    visualize_dijkstra_results(G, start_point, distances, previous, nx_paths)
    
    # –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è
    practical_applications()
    
    # –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    accessible_count = sum(1 for d in distances.values() if d != float('infinity')) - 1
    print(f"\\nüìà –§–Ü–ù–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–∞–π–æ–Ω—ñ–≤ –∑ {start_point}: {accessible_count}")
    print(f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –ø–æ—ó–∑–¥–∫–∏: {np.mean([d for d in distances.values() if d != float('infinity') and d > 0]):.1f} —Ö–≤")
    print(f"‚Ä¢ –ù–∞–π–¥–æ–≤—à–∏–π –º–∞—Ä—à—Ä—É—Ç: {max([d for d in distances.values() if d != float('infinity')]):.0f} —Ö–≤")