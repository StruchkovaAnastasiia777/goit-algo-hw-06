import networkx as nx
from collections import deque
import matplotlib.pyplot as plt

print("üîç –ó–ê–í–î–ê–ù–ù–Ø 2: –ê–õ–ì–û–†–ò–¢–ú–ò DFS –¢–ê BFS")
print("=" * 50)

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥—Ä–∞—Ñ –∑ –ø–µ—Ä—à–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
def create_city_transport_graph():
    """–í—ñ–¥—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è 1"""
    G = nx.Graph()
    
    districts = [
        "–¶–µ–Ω—Ç—Ä", "–í–æ–∫–∑–∞–ª", "–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–õ—ñ–∫–∞—Ä–Ω—è", "–†–∏–Ω–æ–∫", 
        "–ü–∞—Ä–∫", "–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–ü—Ä–æ–º–∑–æ–Ω–∞", "–ê–µ—Ä–æ–ø–æ—Ä—Ç", 
        "–°—Ç–∞–¥—ñ–æ–Ω", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä", "–®–∫–æ–ª–∞"
    ]
    
    routes = [
        ("–¶–µ–Ω—Ç—Ä", "–í–æ–∫–∑–∞–ª"), ("–¶–µ–Ω—Ç—Ä", "–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç"), ("–¶–µ–Ω—Ç—Ä", "–†–∏–Ω–æ–∫"),
        ("–¶–µ–Ω—Ç—Ä", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä"), ("–¶–µ–Ω—Ç—Ä", "–õ—ñ–∫–∞—Ä–Ω—è"),
        ("–í–æ–∫–∑–∞–ª", "–ê–µ—Ä–æ–ø–æ—Ä—Ç"), ("–í–æ–∫–∑–∞–ª", "–ü—Ä–æ–º–∑–æ–Ω–∞"), ("–í–æ–∫–∑–∞–ª", "–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤"),
        ("–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–®–∫–æ–ª–∞"), ("–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–õ—ñ–∫–∞—Ä–Ω—è"), ("–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–ü–∞—Ä–∫"),
        ("–†–∏–Ω–æ–∫", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä"), ("–†–∏–Ω–æ–∫", "–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤"),
        ("–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–®–∫–æ–ª–∞"), ("–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–õ—ñ–∫–∞—Ä–Ω—è"), ("–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–°—Ç–∞–¥—ñ–æ–Ω"),
        ("–ü–∞—Ä–∫", "–°—Ç–∞–¥—ñ–æ–Ω"), ("–ü–∞—Ä–∫", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä"),
        ("–ü—Ä–æ–º–∑–æ–Ω–∞", "–ê–µ—Ä–æ–ø–æ—Ä—Ç"), ("–õ—ñ–∫–∞—Ä–Ω—è", "–°—Ç–∞–¥—ñ–æ–Ω"),
        ("–®–∫–æ–ª–∞", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä"), ("–°—Ç–∞–¥—ñ–æ–Ω", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä")
    ]
    
    G.add_nodes_from(districts)
    G.add_edges_from(routes)
    
    return G

def dfs_paths(graph, start, goal, path=None):
    """
    –ü–æ—à—É–∫ —É –≥–ª–∏–±–∏–Ω—É (DFS) –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —à–ª—è—Ö—ñ–≤
    
    Args:
        graph: NetworkX –≥—Ä–∞—Ñ
        start: –ø–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞  
        goal: —Ü—ñ–ª—å–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        path: –ø–æ—Ç–æ—á–Ω–∏–π —à–ª—è—Ö (–¥–ª—è —Ä–µ–∫—É—Ä—Å—ñ—ó)
    
    Returns:
        –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö —à–ª—è—Ö—ñ–≤ –≤—ñ–¥ start –¥–æ goal
    """
    if path is None:
        path = [start]
    
    if start == goal:
        yield path
    
    for neighbor in graph.neighbors(start):
        if neighbor not in path:  # –£–Ω–∏–∫–∞—î–º–æ —Ü–∏–∫–ª—ñ–≤
            yield from dfs_paths(graph, neighbor, goal, path + [neighbor])

def dfs_path_single(graph, start, goal):
    """
    –ü–æ—à—É–∫ —É –≥–ª–∏–±–∏–Ω—É (DFS) –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —à–ª—è—Ö—É
    
    Args:
        graph: NetworkX –≥—Ä–∞—Ñ
        start: –ø–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        goal: —Ü—ñ–ª—å–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
    
    Returns:
        –ü–µ—Ä—à–∏–π –∑–Ω–∞–π–¥–µ–Ω–∏–π —à–ª—è—Ö –∞–±–æ None
    """
    visited = set()
    stack = [(start, [start])]
    
    while stack:
        current, path = stack.pop()
        
        if current == goal:
            return path
            
        if current not in visited:
            visited.add(current)
            
            # –î–æ–¥–∞—î–º–æ —Å—É—Å—ñ–¥—ñ–≤ –¥–æ —Å—Ç–µ–∫—É (–≤ –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ)
            neighbors = sorted(graph.neighbors(current), reverse=True)
            for neighbor in neighbors:
                if neighbor not in visited:
                    stack.append((neighbor, path + [neighbor]))
    
    return None

def bfs_path(graph, start, goal):
    """
    –ü–æ—à—É–∫ —É —à–∏—Ä–∏–Ω—É (BFS) –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É
    
    Args:
        graph: NetworkX –≥—Ä–∞—Ñ  
        start: –ø–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
        goal: —Ü—ñ–ª—å–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞
    
    Returns:
        –ù–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –∞–±–æ None
    """
    if start == goal:
        return [start]
    
    visited = set([start])
    queue = deque([(start, [start])])
    
    while queue:
        current, path = queue.popleft()
        
        # –°–æ—Ä—Ç—É—î–º–æ —Å—É—Å—ñ–¥—ñ–≤ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        neighbors = sorted(graph.neighbors(current))
        for neighbor in neighbors:
            if neighbor not in visited:
                new_path = path + [neighbor]
                
                if neighbor == goal:
                    return new_path
                
                visited.add(neighbor)
                queue.append((neighbor, new_path))
    
    return None

def compare_algorithms(graph, test_routes):
    """–ü–æ—Ä—ñ–≤–Ω—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ DFS —Ç–∞ BFS –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤"""
    print("\nüÜö –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–Ü–í DFS –¢–ê BFS:")
    print("=" * 60)
    
    results = []
    
    for i, (start, goal) in enumerate(test_routes, 1):
        print(f"\n{i}. –ú–ê–†–®–†–£–¢: {start} ‚Üí {goal}")
        print("-" * 40)
        
        # DFS - –∑–Ω–∞—Ö–æ–¥–∏–º–æ –æ–¥–∏–Ω —à–ª—è—Ö
        dfs_path = dfs_path_single(graph, start, goal)
        
        # BFS - –∑–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö
        bfs_shortest = bfs_path(graph, start, goal)
        
        # DFS - –∑–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ —à–ª—è—Ö–∏ (–æ–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å)
        all_dfs_paths = list(dfs_paths(graph, start, goal))
        
        print(f"DFS (–ø–µ—Ä—à–∏–π –∑–Ω–∞–π–¥–µ–Ω–∏–π): {' ‚Üí '.join(dfs_path) if dfs_path else '–®–ª—è—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}")
        if dfs_path:
            print(f"  –î–æ–≤–∂–∏–Ω–∞: {len(dfs_path)} —Ä–∞–π–æ–Ω—ñ–≤ ({len(dfs_path)-1} –ø–µ—Ä–µ—Å–∞–¥–æ–∫)")
        
        print(f"\\nBFS (–Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π): {' ‚Üí '.join(bfs_shortest) if bfs_shortest else '–®–ª—è—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}")
        if bfs_shortest:
            print(f"  –î–æ–≤–∂–∏–Ω–∞: {len(bfs_shortest)} —Ä–∞–π–æ–Ω—ñ–≤ ({len(bfs_shortest)-1} –ø–µ—Ä–µ—Å–∞–¥–æ–∫)")
        
        print(f"\\n–í—Å—å–æ–≥–æ –º–æ–∂–ª–∏–≤–∏—Ö —à–ª—è—Ö—ñ–≤ (DFS): {len(all_dfs_paths)}")
        if len(all_dfs_paths) > 1:
            print("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —à–ª—è—Ö–∏:")
            for j, path in enumerate(all_dfs_paths[:3], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ª–∏—à–µ –ø–µ—Ä—à—ñ 3
                print(f"  {j}. {' ‚Üí '.join(path)} ({len(path)-1} –ø–µ—Ä–µ—Å–∞–¥–æ–∫)")
            if len(all_dfs_paths) > 3:
                print(f"  ... —Ç–∞ —â–µ {len(all_dfs_paths)-3} —à–ª—è—Ö—ñ–≤")
        
        # –ê–Ω–∞–ª—ñ–∑ —Ä—ñ–∑–Ω–∏—Ü—ñ
        if dfs_path and bfs_shortest:
            if len(dfs_path) == len(bfs_shortest):
                analysis = "‚úÖ –û–¥–Ω–∞–∫–æ–≤–∞ –¥–æ–≤–∂–∏–Ω–∞ - –æ–±–∏–¥–≤–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –∑–Ω–∞–π—à–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —à–ª—è—Ö"
            elif len(dfs_path) > len(bfs_shortest):
                analysis = f"‚ö†Ô∏è DFS –∑–Ω–∞–π—à–æ–≤ –¥–æ–≤—à–∏–π —à–ª—è—Ö (+{len(dfs_path)-len(bfs_shortest)} –ø–µ—Ä–µ—Å–∞–¥–æ–∫)"
            else:
                analysis = f"üîÑ DFS –≤–∏–ø–∞–¥–∫–æ–≤–æ –∑–Ω–∞–π—à–æ–≤ –∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö (-{len(bfs_shortest)-len(dfs_path)} –ø–µ—Ä–µ—Å–∞–¥–æ–∫)"
            
            print(f"\\nüìä –ê–Ω–∞–ª—ñ–∑: {analysis}")
        
        results.append({
            'route': (start, goal),
            'dfs_path': dfs_path,
            'bfs_path': bfs_shortest,
            'all_paths_count': len(all_dfs_paths)
        })
    
    return results

def explain_differences():
    """–ü–æ—è—Å–Ω—é—î —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ DFS —Ç–∞ BFS"""
    print(f"\\nüìö –ü–û–Ø–°–ù–ï–ù–ù–Ø –†–Ü–ó–ù–ò–¶–Ü –ú–Ü–ñ DFS –¢–ê BFS:")
    print("=" * 50)
    
    print(f"üîç –ê–õ–ì–û–†–ò–¢–ú DFS (–ü–û–®–£–ö –£ –ì–õ–ò–ë–ò–ù–£):")
    print(f"‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: '–Ü–¥–∏ —è–∫–æ–º–æ–≥–∞ –≥–ª–∏–±—à–µ, –ø–æ—Ç—ñ–º –ø–æ–≤–µ—Ä—Ç–∞–π—Å—è'")
    print(f"‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö: –°–¢–ï–ö (–æ—Å—Ç–∞–Ω–Ω—ñ–π —É–≤—ñ–π—à–æ–≤ - –ø–µ—Ä—à–∏–π –≤–∏–π—à–æ–≤)")
    print(f"‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø —Ä–æ–±–æ—Ç–∏:")
    print(f"  1. –ü–æ—á–∏–Ω–∞—î –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Ç–æ—á–∫–∏")
    print(f"  2. –ô–¥–µ –ø–æ –ø–µ—Ä—à–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É –¥–æ –∫—ñ–Ω—Ü—è")
    print(f"  3. –Ø–∫—â–æ –∑–∞–π—à–æ–≤ —É –≥–ª—É—Ö–∏–π –∫—É—Ç - –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –Ω–∞–∑–∞–¥")
    print(f"  4. –ü—Ä–æ–±—É—î —ñ–Ω—à–∏–π –º–∞—Ä—à—Ä—É—Ç")
    print(f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ë–£–î–¨-–Ø–ö–ò–ô —à–ª—è—Ö (–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π)")
    print(f"‚Ä¢ –ê–Ω–∞–ª–æ–≥—ñ—è: –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –ª–∞–±—ñ—Ä–∏–Ω—Ç—É –º–µ—Ç–æ–¥–æ–º '–ø—Ä–∞–≤–æ—ó —Ä—É–∫–∏'")
    
    print(f"\\nüåä –ê–õ–ì–û–†–ò–¢–ú BFS (–ü–û–®–£–ö –£ –®–ò–†–ò–ù–£):")
    print(f"‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: '–ü–µ—Ä–µ–≤—ñ—Ä –≤—Å—ñ—Ö —Å—É—Å—ñ–¥—ñ–≤, –ø–æ—Ç—ñ–º —Å—É—Å—ñ–¥—ñ–≤ —Å—É—Å—ñ–¥—ñ–≤'")
    print(f"‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö: –ß–ï–†–ì–ê (–ø–µ—Ä—à–∏–π —É–≤—ñ–π—à–æ–≤ - –ø–µ—Ä—à–∏–π –≤–∏–π—à–æ–≤)")
    print(f"‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø —Ä–æ–±–æ—Ç–∏:")
    print(f"  1. –ü–æ—á–∏–Ω–∞—î –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Ç–æ—á–∫–∏")
    print(f"  2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ —Å—É—Å—ñ–¥–Ω—ñ —Ä–∞–π–æ–Ω–∏")
    print(f"  3. –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Å—É—Å—ñ–¥—ñ–≤ —Ü–∏—Ö —Ä–∞–π–æ–Ω—ñ–≤")
    print(f"  4. –ü—Ä–æ–¥–æ–≤–∂—É—î '—Ö–≤–∏–ª—è–º–∏' –¥–æ –º–µ—Ç–∏")
    print(f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ó–∞–≤–∂–¥–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –ù–ê–ô–ö–û–†–û–¢–®–ò–ô —à–ª—è—Ö")
    print(f"‚Ä¢ –ê–Ω–∞–ª–æ–≥—ñ—è: –†–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∞–±–æ –µ–ø—ñ–¥–µ–º—ñ—ó")
    
    print(f"\\n‚öñÔ∏è –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø:")
    print(f"‚Ä¢ –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: –û–±–∏–¥–≤–∞ O(V + E), –∞–ª–µ BFS –∑–∞–∑–≤–∏—á–∞–π —à–≤–∏–¥—à–∏–π –¥–ª—è –ø–æ—à—É–∫—É")
    print(f"‚Ä¢ –ü–∞–º'—è—Ç—å: DFS –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ–Ω—à–µ –ø–∞–º'—è—Ç—ñ")
    print(f"‚Ä¢ –ì–∞—Ä–∞–Ω—Ç—ñ—ó: BFS –∑–∞–≤–∂–¥–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö, DFS - –Ω—ñ")
    print(f"‚Ä¢ –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:")
    print(f"  - DFS: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–Ω–æ—Å—Ç—ñ, –ø–æ—à—É–∫ —Ü–∏–∫–ª—ñ–≤, —Ç–æ–ø–æ–ª–æ–≥—ñ—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è")
    print(f"  - BFS: –ù–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö, —Ä—ñ–≤–Ω–µ–≤–∏–π –æ–±—Ö—ñ–¥, –ø–æ—à—É–∫ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ")

def visualize_paths(graph, results):
    """–í—ñ–∑—É–∞–ª—ñ–∑—É—î –∑–Ω–∞–π–¥–µ–Ω—ñ —à–ª—è—Ö–∏"""
    print(f"\\nüé® –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø –ó–ù–ê–ô–î–ï–ù–ò–• –®–õ–Ø–•–Ü–í:")
    
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ DFS —Ç–∞ BFS: –∑–Ω–∞–π–¥–µ–Ω—ñ —à–ª—è—Ö–∏', fontsize=16, fontweight='bold')
    
    pos = nx.spring_layout(graph, seed=42, k=3, iterations=50)
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –¥–≤–∞ –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
    for idx, result in enumerate(results[:2]):
        start, goal = result['route']
        dfs_path = result['dfs_path']
        bfs_path = result['bfs_path']
        
        # DFS —à–ª—è—Ö
        ax_dfs = axes[idx, 0]
        nx.draw(graph, pos, ax=ax_dfs, with_labels=True, node_color='lightgray',
                node_size=800, font_size=8, font_weight='bold', edge_color='lightgray')
        
        if dfs_path:
            # –í–∏–¥—ñ–ª—è—î–º–æ —à–ª—è—Ö DFS
            path_edges = [(dfs_path[i], dfs_path[i+1]) for i in range(len(dfs_path)-1)]
            nx.draw_networkx_nodes(graph, pos, nodelist=dfs_path, node_color='red', 
                                 node_size=1000, ax=ax_dfs)
            nx.draw_networkx_edges(graph, pos, edgelist=path_edges, edge_color='red', 
                                 width=3, ax=ax_dfs)
            # –í–∏–¥—ñ–ª—è—î–º–æ –ø–æ—á–∞—Ç–æ–∫ —Ç–∞ –∫—ñ–Ω–µ—Ü—å
            nx.draw_networkx_nodes(graph, pos, nodelist=[start], node_color='green', 
                                 node_size=1200, ax=ax_dfs)
            nx.draw_networkx_nodes(graph, pos, nodelist=[goal], node_color='orange', 
                                 node_size=1200, ax=ax_dfs)
        
        ax_dfs.set_title(f'DFS —à–ª—è—Ö: {start} ‚Üí {goal}\\n{" ‚Üí ".join(dfs_path) if dfs_path else "–®–ª—è—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}', 
                        fontweight='bold')
        
        # BFS —à–ª—è—Ö
        ax_bfs = axes[idx, 1]
        nx.draw(graph, pos, ax=ax_bfs, with_labels=True, node_color='lightgray',
                node_size=800, font_size=8, font_weight='bold', edge_color='lightgray')
        
        if bfs_path:
            # –í–∏–¥—ñ–ª—è—î–º–æ —à–ª—è—Ö BFS
            path_edges = [(bfs_path[i], bfs_path[i+1]) for i in range(len(bfs_path)-1)]
            nx.draw_networkx_nodes(graph, pos, nodelist=bfs_path, node_color='blue', 
                                 node_size=1000, ax=ax_bfs)
            nx.draw_networkx_edges(graph, pos, edgelist=path_edges, edge_color='blue', 
                                 width=3, ax=ax_bfs)
            # –í–∏–¥—ñ–ª—è—î–º–æ –ø–æ—á–∞—Ç–æ–∫ —Ç–∞ –∫—ñ–Ω–µ—Ü—å
            nx.draw_networkx_nodes(graph, pos, nodelist=[start], node_color='green', 
                                 node_size=1200, ax=ax_bfs)
            nx.draw_networkx_nodes(graph, pos, nodelist=[goal], node_color='orange', 
                                 node_size=1200, ax=ax_bfs)
        
        ax_bfs.set_title(f'BFS —à–ª—è—Ö: {start} ‚Üí {goal}\\n{" ‚Üí ".join(bfs_path) if bfs_path else "–®–ª—è—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}', 
                        fontweight='bold')
    
    plt.tight_layout()
    plt.show()

# –û—Å–Ω–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ
    G = create_city_transport_graph()
    
    print(f"–ì—Ä–∞—Ñ –º—ñ—Å—Ç–∏—Ç—å {G.number_of_nodes()} —Ä–∞–π–æ–Ω—ñ–≤ —Ç–∞ {G.number_of_edges()} –º–∞—Ä—à—Ä—É—Ç—ñ–≤")
    
    # –¢–µ—Å—Ç–æ–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    test_routes = [
        ("–í–æ–∫–∑–∞–ª", "–ê–µ—Ä–æ–ø–æ—Ä—Ç"),
        ("–¶–µ–Ω—Ç—Ä", "–®–∫–æ–ª–∞"),  
        ("–ü–∞—Ä–∫", "–ü—Ä–æ–º–∑–æ–Ω–∞"),
        ("–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç")
    ]
    
    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
    results = compare_algorithms(G, test_routes)
    
    # –ü–æ—è—Å–Ω—é—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é
    explain_differences()
    
    # –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    visualize_paths(G, results)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è 3
    globals()['city_graph'] = G
    globals()['test_results'] = results