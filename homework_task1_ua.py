import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

print("üöå –ó–ê–í–î–ê–ù–ù–Ø 1: –¢–†–ê–ù–°–ü–û–†–¢–ù–ê –ú–ï–†–ï–ñ–ê –ú–Ü–°–¢–ê")
print("=" * 50)

def create_city_transport_graph():
    """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ—ó –º–µ—Ä–µ–∂—ñ –º—ñ—Å—Ç–∞ (–∞–≤—Ç–æ–±—É—Å–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏)"""
    G = nx.Graph()
    
    # –î–æ–¥–∞—î–º–æ —Ä–∞–π–æ–Ω–∏ –º—ñ—Å—Ç–∞ —è–∫ –≤–µ—Ä—à–∏–Ω–∏
    districts = [
        "–¶–µ–Ω—Ç—Ä", "–í–æ–∫–∑–∞–ª", "–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–õ—ñ–∫–∞—Ä–Ω—è", "–†–∏–Ω–æ–∫", 
        "–ü–∞—Ä–∫", "–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–ü—Ä–æ–º–∑–æ–Ω–∞", "–ê–µ—Ä–æ–ø–æ—Ä—Ç", 
        "–°—Ç–∞–¥—ñ–æ–Ω", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä", "–®–∫–æ–ª–∞"
    ]
    
    G.add_nodes_from(districts)
    
    # –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ–±—É—Å–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ (—Ä–µ–±—Ä–∞ –º—ñ–∂ —Ä–∞–π–æ–Ω–∞–º–∏)
    routes = [
        # –û—Å–Ω–æ–≤–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä
        ("–¶–µ–Ω—Ç—Ä", "–í–æ–∫–∑–∞–ª"),
        ("–¶–µ–Ω—Ç—Ä", "–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç"), 
        ("–¶–µ–Ω—Ç—Ä", "–†–∏–Ω–æ–∫"),
        ("–¶–µ–Ω—Ç—Ä", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä"),
        ("–¶–µ–Ω—Ç—Ä", "–õ—ñ–∫–∞—Ä–Ω—è"),
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏ –≤—ñ–¥ –≤–æ–∫–∑–∞–ª—É
        ("–í–æ–∫–∑–∞–ª", "–ê–µ—Ä–æ–ø–æ—Ä—Ç"),
        ("–í–æ–∫–∑–∞–ª", "–ü—Ä–æ–º–∑–æ–Ω–∞"),
        ("–í–æ–∫–∑–∞–ª", "–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤"),
        
        # –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å—å–∫—ñ –º–∞—Ä—à—Ä—É—Ç–∏
        ("–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–®–∫–æ–ª–∞"),
        ("–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–õ—ñ–∫–∞—Ä–Ω—è"),
        ("–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–ü–∞—Ä–∫"),
        
        # –¢–æ—Ä–≥–æ–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏
        ("–†–∏–Ω–æ–∫", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä"),
        ("–†–∏–Ω–æ–∫", "–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤"),
        
        # –ñ–∏—Ç–ª–æ–≤—ñ —Ä–∞–π–æ–Ω–∏
        ("–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–®–∫–æ–ª–∞"),
        ("–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–õ—ñ–∫–∞—Ä–Ω—è"),
        ("–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–°—Ç–∞–¥—ñ–æ–Ω"),
        
        # –†–æ–∑–≤–∞–∂–∞–ª—å–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏
        ("–ü–∞—Ä–∫", "–°—Ç–∞–¥—ñ–æ–Ω"),
        ("–ü–∞—Ä–∫", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä"),
        
        # –ü—Ä–æ–º–∏—Å–ª–æ–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏  
        ("–ü—Ä–æ–º–∑–æ–Ω–∞", "–ê–µ—Ä–æ–ø–æ—Ä—Ç"),
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
        ("–õ—ñ–∫–∞—Ä–Ω—è", "–°—Ç–∞–¥—ñ–æ–Ω"),
        ("–®–∫–æ–ª–∞", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä"),
        ("–°—Ç–∞–¥—ñ–æ–Ω", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä")
    ]
    
    G.add_edges_from(routes)
    
    return G, districts, routes

def analyze_graph(G, districts, routes):
    """–ê–Ω–∞–ª—ñ–∑—É—î –æ—Å–Ω–æ–≤–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞—Ñ–∞"""
    print("\nüìä –ê–ù–ê–õ–Ü–ó –û–°–ù–û–í–ù–ò–• –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö –ì–†–ê–§–ê:")
    print("-" * 40)
    
    # –û—Å–Ω–æ–≤–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    num_nodes = G.number_of_nodes()
    num_edges = G.number_of_edges()
    
    print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–µ—Ä—à–∏–Ω (—Ä–∞–π–æ–Ω—ñ–≤): {num_nodes}")
    print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–±–µ—Ä (–º–∞—Ä—à—Ä—É—Ç—ñ–≤): {num_edges}")
    print(f"–ì—Ä–∞—Ñ –∑–≤'—è–∑–Ω–∏–π: {'–¢–∞–∫' if nx.is_connected(G) else '–ù—ñ'}")
    
    # –°—Ç—É–ø–µ–Ω—ñ –≤–µ—Ä—à–∏–Ω
    degrees = dict(G.degree())
    print(f"\nüî¢ –°–¢–£–ü–ï–ù–Ü –í–ï–†–®–ò–ù (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ñ–≤):")
    for district, degree in sorted(degrees.items(), key=lambda x: x[1], reverse=True):
        print(f"  {district}: {degree} –º–∞—Ä—à—Ä—É—Ç—ñ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—É–ø–µ–Ω—ñ–≤
    degree_values = list(degrees.values())
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–£–ü–ï–ù–Ü–í:")
    print(f"  –°–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç—É–ø—ñ–Ω—å: {np.mean(degree_values):.2f}")
    print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Å—Ç—É–ø—ñ–Ω—å: {max(degree_values)}")
    print(f"  –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å—Ç—É–ø—ñ–Ω—å: {min(degree_values)}")
    
    # –©—ñ–ª—å–Ω—ñ—Å—Ç—å –≥—Ä–∞—Ñ–∞
    density = nx.density(G)
    print(f"\nüåê –©–Ü–õ–¨–ù–Ü–°–¢–¨ –ì–†–ê–§–ê: {density:.3f}")
    print(f"  (–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö —Ä–µ–±–µ—Ä –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ–∂–ª–∏–≤–∏—Ö)")
    
    # –î—ñ–∞–º–µ—Ç—Ä —Ç–∞ —Å–µ—Ä–µ–¥–Ω—è –¥–æ–≤–∂–∏–Ω–∞ —à–ª—è—Ö—É
    if nx.is_connected(G):
        diameter = nx.diameter(G)
        avg_path_length = nx.average_shortest_path_length(G)
        print(f"\nüìè –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –í–Ü–î–°–¢–ê–ù–ï–ô:")
        print(f"  –î—ñ–∞–º–µ—Ç—Ä –≥—Ä–∞—Ñ–∞: {diameter}")
        print(f"  –°–µ—Ä–µ–¥–Ω—è –¥–æ–≤–∂–∏–Ω–∞ —à–ª—è—Ö—É: {avg_path_length:.2f}")
    
    # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ñ—Å—Ç—å
    degree_centrality = nx.degree_centrality(G)
    betweenness_centrality = nx.betweenness_centrality(G)
    closeness_centrality = nx.closeness_centrality(G)
    
    print(f"\n‚≠ê –¢–û–ü-3 –ù–ê–ô–í–ê–ñ–õ–ò–í–Ü–®–Ü –†–ê–ô–û–ù–ò:")
    
    print(f"\n–ó–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –º–∞—Ä—à—Ä—É—Ç—ñ–≤ (degree centrality):")
    top_degree = sorted(degree_centrality.items(), key=lambda x: x[1], reverse=True)[:3]
    for i, (district, centrality) in enumerate(top_degree, 1):
        print(f"  {i}. {district}: {centrality:.3f}")
    
    print(f"\n–ó–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ñ—Å—Ç—é (betweenness centrality):")
    top_betweenness = sorted(betweenness_centrality.items(), key=lambda x: x[1], reverse=True)[:3]
    for i, (district, centrality) in enumerate(top_betweenness, 1):
        print(f"  {i}. {district}: {centrality:.3f}")
    
    print(f"\n–ó–∞ –±–ª–∏–∑—å–∫—ñ—Å—Ç—é (closeness centrality):")
    top_closeness = sorted(closeness_centrality.items(), key=lambda x: x[1], reverse=True)[:3]
    for i, (district, centrality) in enumerate(top_closeness, 1):
        print(f"  {i}. {district}: {centrality:.3f}")
    
    return degrees, degree_centrality, betweenness_centrality

def visualize_graph(G, degrees, degree_centrality, betweenness_centrality):
    """–í—ñ–∑—É–∞–ª—ñ–∑—É—î –≥—Ä–∞—Ñ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
    print("\nüé® –°–¢–í–û–†–ï–ù–ù–Ø –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–á:")
    
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞ –º–µ—Ä–µ–∂–∞ –º—ñ—Å—Ç–∞: –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è', fontsize=16, fontweight='bold')
    
    # –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –≤–µ—Ä—à–∏–Ω
    pos = nx.spring_layout(G, seed=42, k=3, iterations=50)
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ë–∞–∑–æ–≤–∏–π –≥—Ä–∞—Ñ
    nx.draw(G, pos, ax=axes[0,0], with_labels=True, node_color='lightblue',
            node_size=1000, font_size=9, font_weight='bold', edge_color='gray')
    axes[0,0].set_title('–°—Ö–µ–º–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ—ó –º–µ—Ä–µ–∂—ñ\n(–≤–µ—Ä—à–∏–Ω–∏ = —Ä–∞–π–æ–Ω–∏, —Ä–µ–±—Ä–∞ = –º–∞—Ä—à—Ä—É—Ç–∏)', fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –†–æ–∑–º—ñ—Ä–∏ –≤—É–∑–ª—ñ–≤ –∑–∞ —Å—Ç—É–ø–µ–Ω–µ–º
    node_sizes = [degrees[node] * 200 for node in G.nodes()]
    nx.draw(G, pos, ax=axes[0,1], with_labels=True, node_color='orange',
            node_size=node_sizes, font_size=9, font_weight='bold', edge_color='gray')
    axes[0,1].set_title('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ñ–≤\n(–±—ñ–ª—å—à–∏–π –≤—É–∑–æ–ª = –±—ñ–ª—å—à–µ –º–∞—Ä—à—Ä—É—Ç—ñ–≤)', fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ö–æ–ª—å–æ—Ä–∏ –∑–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ñ—Å—Ç—é –ø–æ —Å—Ç—É–ø–µ–Ω—é
    node_colors = [degree_centrality[node] for node in G.nodes()]
    nx.draw(G, pos, ax=axes[1,0], with_labels=True, 
            node_color=node_colors, node_size=1000, font_size=9, 
            font_weight='bold', edge_color='gray', cmap='Reds')
    axes[1,0].set_title('–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ñ—Å—Ç—å –ø–æ —Å—Ç—É–ø–µ–Ω—é\n(—á–µ—Ä–≤–æ–Ω—ñ—à–∏–π = –≤–∞–∂–ª–∏–≤—ñ—à–∏–π)', fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –ö–æ–ª—å–æ—Ä–∏ –∑–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ñ—Å—Ç—é –ø–æ—Å–µ—Ä–µ–¥–Ω–∏—Ü—Ç–≤–∞
    node_colors = [betweenness_centrality[node] for node in G.nodes()]
    nx.draw(G, pos, ax=axes[1,1], with_labels=True,
            node_color=node_colors, node_size=1000, font_size=9,
            font_weight='bold', edge_color='gray', cmap='Blues')
    axes[1,1].set_title('–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ñ—Å—Ç—å –ø–æ—Å–µ—Ä–µ–¥–Ω–∏—Ü—Ç–≤–∞\n(—Å–∏–Ω—ñ—à–∏–π = –±—ñ–ª—å—à–µ –∑\'—î–¥–Ω—É—î)', fontweight='bold')
    
    plt.tight_layout()
    plt.show()

def create_route_analysis(G):
    """–ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤"""
    print("\nüó∫Ô∏è –ê–ù–ê–õ–Ü–ó –ö–û–ù–ö–†–ï–¢–ù–ò–• –ú–ê–†–®–†–£–¢–Ü–í:")
    print("-" * 40)
    
    # –ù–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –º—ñ–∂ –≤–∞–∂–ª–∏–≤–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
    important_routes = [
        ("–í–æ–∫–∑–∞–ª", "–ê–µ—Ä–æ–ø–æ—Ä—Ç"),
        ("–¶–µ–Ω—Ç—Ä", "–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç"), 
        ("–ñ–∏—Ç–ª–æ–≤–∏–π_–º–∞—Å–∏–≤", "–õ—ñ–∫–∞—Ä–Ω—è"),
        ("–ü–∞—Ä–∫", "–¢–æ—Ä–≥–æ–≤–∏–π_—Ü–µ–Ω—Ç—Ä")
    ]
    
    for start, end in important_routes:
        if nx.has_path(G, start, end):
            path = nx.shortest_path(G, start, end)
            length = len(path) - 1
            print(f"  {start} ‚Üí {end}: {' ‚Üí '.join(path)} (–ø–µ—Ä–µ—Å–∞–¥–æ–∫: {length})")
        else:
            print(f"  {start} ‚Üí {end}: –®–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î")

# –û—Å–Ω–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ
    G, districts, routes = create_city_transport_graph()
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≥—Ä–∞—Ñ
    degrees, degree_centrality, betweenness_centrality = analyze_graph(G, districts, routes)
    
    # –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ –≥—Ä–∞—Ñ
    visualize_graph(G, degrees, degree_centrality, betweenness_centrality)
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏
    create_route_analysis(G)
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥—Ä–∞—Ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –∑–∞–≤–¥–∞–Ω–Ω—è—Ö
    globals()['city_graph'] = G